--step 1: look into the two tables and confirm there are shared values among them and counting the total rows in DF_TBC_SPEND_FINAL that will be affected.

SELECT COUNT(*)
FROM DF_TBC_SPEND_FINAL FINAL
INNER JOIN DF_TBC_UPDATE_TABLE SOURCE
ON (FINAL.FILE_NAME = SOURCE.FILE_NAME 
    AND FINAL.INVOICE_NBR = SOURCE.INVOICE_NBR 
    AND FINAL.SUPPLIER_NBR = SOURCE.SUPPLIER_NBR);
    
-- count of distinct combinations from TBC_SPEND_FINAL that match DF_TBC_UPDATE_TABLE,
    
SELECT COUNT(DISTINCT FINAL.FILE_NAME || FINAL.INVOICE_NBR || FINAL.SUPPLIER_NBR)
FROM TBC_SPEND_FINAL FINAL
INNER JOIN DF_TBC_UPDATE_TABLE SOURCE
ON (FINAL.FILE_NAME = SOURCE.FILE_NAME 
    AND FINAL.INVOICE_NBR = SOURCE.INVOICE_NBR 
    AND FINAL.SUPPLIER_NBR = SOURCE.SUPPLIER_NBR);

    
--step 3: return the count of rows of DF_TBC_UPDATE_TABLE  that do not exist in DF_TBC_SPEND_FINAL.

SELECT COUNT(*)
FROM DF_TBC_UPDATE_TABLE SOURCE
LEFT JOIN DF_TBC_SPEND_FINAL FINAL
ON (FINAL.FILE_NAME = SOURCE.FILE_NAME 
    AND FINAL.INVOICE_NBR = SOURCE.INVOICE_NBR 
    AND FINAL.SUPPLIER_NBR = SOURCE.SUPPLIER_NBR)
WHERE FINAL.FILE_NAME IS NULL OR FINAL.INVOICE_NBR IS NULL OR FINAL.SUPPLIER_NBR IS NULL;


-- step 4: perform the merge operation

MERGE INTO DF_TBC_SPEND_FINAL FINAL
USING (
    SELECT 
        FILE_NAME, INVOICE_NBR, SUPPLIER_NBR, INVOICE_REFERENCE
    FROM 
        DF_TBC_UPDATE_TABLE
) SOURCE
ON (FINAL.FILE_NAME = SOURCE.FILE_NAME 
    AND FINAL.INVOICE_NBR = SOURCE.INVOICE_NBR 
    AND FINAL.SUPPLIER_NBR = SOURCE.SUPPLIER_NBR)
WHEN MATCHED THEN 
    UPDATE SET FINAL.INVOICE_REFERENCE = SOURCE.INVOICE_REFERENCE;
    




