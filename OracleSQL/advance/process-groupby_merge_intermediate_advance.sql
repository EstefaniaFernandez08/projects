-- Create and drop a copy of the table for testing purposes
CREATE TABLE DF_SPEND_FINAL AS
SELECT * FROM HPO_SPEND_FINAL;

DROP TABLE DF_SPEND_FINAL;
DROP TABLE DF_UPDATE_TABLE;

-- 0. Create the server-side table structure
CREATE TABLE DF_UPDATE_TABLE
(
    SUPPLIER_NBR VARCHAR2(2000 BYTE),
    SUPPLIER_ERP VARCHAR2(2000 BYTE),
    SUPPLIER_ADDRESS VARCHAR2(2000 BYTE),
    SUPPLIER_CITY VARCHAR2(2000 BYTE),
    SUPPLIER_STATE VARCHAR2(2000 BYTE),
    SUPPLIER_ZIP_POSTAL_CDE VARCHAR2(2000 BYTE),
    SUPPLIER_COUNTRY VARCHAR2(2000 BYTE),
    SUPPLIER_TAX_ID VARCHAR2(2000 BYTE),
    SOURCE VARCHAR2(70 BYTE),
    "Confidence Code" VARCHAR2(2 BYTE),
    "D-U-N-S Number" VARCHAR2(20 BYTE),
    SUPPLIER_NORMALIZED VARCHAR2(2000 BYTE),
    SUPPLIER_PARENT VARCHAR2(2000 BYTE)
);

/* 1.1 Import data into the server-side

        a. Right-click on the created temporary table "DF_UPDATE_TABLE"  and select "Import Data."
        b. In the Import Data window, browse and select the downloaded CSV file.
        c. In the Import Data window, modify the format to "csv" and encoding to "UTF-8".
        d. Click "Next" on the Import Method tab.
        e. Click "Next" on the Choose Columns tab.
        f. Click "Next" on the Column Definition tab.
        g. Click "Finish".
        h. Wait for the data to load successfully. */

-- Explore historical distinct values before and after the update

SELECT
    COUNT(DISTINCT SUPPLIER_ERP) AS DISTINCT_SUPPLIER_ERP,
    COUNT(DISTINCT SUPPLIER_ADDRESS) AS DISTINCT_SUPPLIER_ADDRESS,
    COUNT(DISTINCT SUPPLIER_CITY) AS DISTINCT_SUPPLIER_CITY,
    COUNT(DISTINCT SUPPLIER_COUNTRY) AS DISTINCT_SUPPLIER_COUNTRY,
    COUNT(DISTINCT SUPPLIER_NBR) AS DISTINCT_SUPPLIER_NBR,
    COUNT(DISTINCT SUPPLIER_STATE) AS DISTINCT_SUPPLIER_STATE,
    COUNT(DISTINCT SUPPLIER_TAX_ID) AS DISTINCT_SUPPLIER_TAX_ID,
    COUNT(DISTINCT SUPPLIER_ZIP_POSTAL_CDE) AS DISTINCT_SUPPLIER_ZIP_POSTAL_CDE,
    COUNT(DISTINCT SUPPLIER_NORMALIZED) AS DISTINCT_SUPPLIER_NORMALIZED,
    COUNT(DISTINCT SUPPLIER_PARENT) AS DISTINCT_SUPPLIER_PARENT
FROM DF_SPEND_FINAL;

--Return the count of null values for each column
SELECT
    COUNT(*) - COUNT(SUPPLIER_ERP) AS NULL_COUNT_SUPPLIER_ERP,
    COUNT(*) - COUNT(SUPPLIER_ADDRESS) AS NULL_COUNT_SUPPLIER_ADDRESS,
    COUNT(*) - COUNT(SUPPLIER_CITY) AS NULL_COUNT_SUPPLIER_CITY,
    COUNT(*) - COUNT(SUPPLIER_COUNTRY) AS NULL_COUNT_SUPPLIER_COUNTRY,
    COUNT(*) - COUNT(SUPPLIER_NBR) AS NULL_COUNT_SUPPLIER_NBR,
    COUNT(*) - COUNT(SUPPLIER_STATE) AS NULL_COUNT_SUPPLIER_STATE,
    COUNT(*) - COUNT(SUPPLIER_TAX_ID) AS NULL_COUNT_SUPPLIER_TAX_ID,
    COUNT(*) - COUNT(SUPPLIER_ZIP_POSTAL_CDE) AS NULL_COUNT_SUPPLIER_ZIP_POSTAL_CDE,
    COUNT(*) - COUNT(SUPPLIER_NORMALIZED) AS NULL_COUNT_SUPPLIER_NORMALIZED,
    COUNT(*) - COUNT(SUPPLIER_PARENT) AS NULL_COUNT_SUPPLIER_PARENT
FROM DF_SPEND_FINAL;

-- Export a simplified version of the oracle table for exploration in PowerQuery
SELECT 
    SOURCE_DATA,
    SUPPLIER_ERP,
    SUPPLIER_ADDRESS,
    SUPPLIER_CITY,
    SUPPLIER_COUNTRY,
    SUPPLIER_NBR,
    SUPPLIER_STATE,
    SUPPLIER_TAX_ID,
    SUPPLIER_TYPE,
    SUPPLIER_ZIP_POSTAL_CDE,
    SUPPLIER_NORMALIZED,
    SUPPLIER_PARENT,
    FISCAL_MONTH,
    FISCAL_QUARTER,
    FISCAL_YEAR,
    COUNT(SOURCE_DATA) AS ROW_COUNT,
    SUM(SPEND_USD)AS SPEND_USD
FROM DF_SPEND_FINAL
GROUP BY 
    SOURCE_DATA,
    SUPPLIER_ERP,
    SUPPLIER_ADDRESS,
    SUPPLIER_CITY,
    SUPPLIER_COUNTRY,
    SUPPLIER_NBR,
    SUPPLIER_STATE,
    SUPPLIER_TAX_ID,
    SUPPLIER_TYPE,
    SUPPLIER_ZIP_POSTAL_CDE,
    SUPPLIER_NORMALIZED,
    SUPPLIER_PARENT,
    FISCAL_MONTH,
    FISCAL_QUARTER,
    FISCAL_YEAR;
    
-- Test the merge update statement
-- 1. Fix a historical fragmentation issue before 2024
MERGE INTO DF_SPEND_FINAL FINAL
USING (
    SELECT
        SIDE.SUPPLIER_NBR,
        SIDE.SUPPLIER_NORMALIZED,
        SIDE.SUPPLIER_PARENT
    FROM DF_UPDATE_TABLE SIDE
) SIDE
ON (
    FINAL.SUPPLIER_NBR = SIDE.SUPPLIER_NBR
)
WHEN MATCHED THEN
    UPDATE SET
        FINAL.SUPPLIER_NORMALIZED = SIDE.SUPPLIER_NORMALIZED,
        FINAL.SUPPLIER_PARENT = SIDE.SUPPLIER_PARENT
    WHERE FINAL.FISCAL_YEAR <> 'FY_2024';


-- 2. Add in supplier-related data historically in case of blanks
MERGE INTO DF_SPEND_FINAL FINAL
USING (
    SELECT DISTINCT
        SIDE.SUPPLIER_ADDRESS,
        SIDE.SUPPLIER_CITY,
        SIDE.SUPPLIER_COUNTRY,
        SIDE.SUPPLIER_NBR,
        SIDE.SUPPLIER_STATE,
        SIDE.SUPPLIER_TAX_ID,
        SIDE.SUPPLIER_ZIP_POSTAL_CDE,
        SIDE.SUPPLIER_NORMALIZED,
        SIDE.SUPPLIER_PARENT
    FROM DF_UPDATE_TABLE SIDE
) SIDE
ON (
    FINAL.SUPPLIER_NBR = SIDE.SUPPLIER_NBR
)
WHEN MATCHED THEN
    UPDATE SET
        FINAL.SUPPLIER_ADDRESS = SIDE.SUPPLIER_ADDRESS,
        FINAL.SUPPLIER_CITY = SIDE.SUPPLIER_CITY,
        FINAL.SUPPLIER_COUNTRY = SIDE.SUPPLIER_COUNTRY,
        FINAL.SUPPLIER_STATE = SIDE.SUPPLIER_STATE,
        FINAL.SUPPLIER_TAX_ID = SIDE.SUPPLIER_TAX_ID,
        FINAL.SUPPLIER_ZIP_POSTAL_CDE = SIDE.SUPPLIER_ZIP_POSTAL_CDE,
        FINAL.SUPPLIER_NORMALIZED = SIDE.SUPPLIER_NORMALIZED,
        FINAL.SUPPLIER_PARENT = SIDE.SUPPLIER_PARENT
    WHERE FINAL.SUPPLIER_ADDRESS IS NULL AND FINAL.SUPPLIER_NBR IS NOT NULL;



    

